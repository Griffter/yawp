{"name":"YAWP!","tagline":"Unbelievably Simple API DSL for Java","body":"# YAWP!\r\n\r\nUnbelievably Simple API DSL for Java\r\n\r\n[![Build Status](https://travis-ci.org/feroult/yawp.svg)](https://travis-ci.org/feroult/yawp)\r\n\r\n## Introduction\r\n\r\n**YAWP!** main purpose is to help developers create meaningful APIs to support their REST based applications. It supports Google App Engine and PostgreSQL environments.\r\n\r\nYou create your POJOs and **YAWP!**\r\n\r\n## The Shortest Tutorial\r\n\r\nIf you want a really short tutorial to start using YAWP! Try [this one](https://github.com/feroult/yawp/wiki/The-Shortest-Tutorial).\r\n\r\n## IRC\r\n\r\nIf you want to talk about yawp, go to channel __#yawp__ at __chat.freenode.net__\r\n\r\n## How it Works\r\n\r\nFrom a single class annotation, it provides a full REST url schema with a fluent progamatic API for Java and Javascript. You write your client side code the same way you do for your server side. It also provides a convenient way to organize your server side business logic.\r\n\r\n### REST Schema\r\n\r\nAnnotate your POJO:\r\n```java\r\n@Endpoint(path = \"/people\")\r\npublic class Person {\r\n\r\n    private String name;\r\n\r\n}\r\n```\r\n\r\nThen use one of HTTP, Java or Javascript APIs to access your resources:\r\n\r\n**HTTP**:\r\n\r\n| Verb        | Path           | Action                |\r\n| ----------- |--------------- | --------------------- |\r\n| GET         | /people        | List people           |\r\n| POST        | /people        | Create a person       |\r\n| GET         | /people/{id}   | Show a person         |\r\n| PUT/PATCH   | /people/{id}   | Update a person       |\r\n| DELETE      | /people/{id}   | Destroy a person      |\r\n\r\n**Javascript**:\r\n```javascript\r\nyawp('/people').list( function(people) {} );\r\n\r\nyawp('/people').create({ name : 'Janes' }).done( function(person) {} );\r\n\r\nyawp(personId).fetch( function(person) {} );\r\n\r\nyawp.update(person).done( function(person) {} );\r\n\r\nyawp.destroy(personId).done( function(personId) {} );\r\n```\r\n\r\n**Java**:\r\n```java\r\nList<Person> people = yawp(Person.class).list();\r\n\r\nyawp.save(new Person(\"Janes\"));\r\n\r\nPerson person = yawp(Person.class).fetch(personId);\r\n\r\nyawp.save(person);\r\n\r\nyawp.destroy(person.getId());\r\n```\r\n\r\n### IdRef\r\n\r\nThe IdRef&lt;T&gt; brings a bit of innovation inside your POJOs. This class simplifies all underlying manipulation of Datastore Key mechanism and creates a type safe link beetween all your domain objects.\r\n\r\nTo define the identity field of a domain object you need to declare an IdRef&lt;T&gt; annotated with @Id. Then you can use this identity as a reference from another domain object.\r\n\r\nAlso, through the @ParentId annotation, IdRef exposes the Ancestor mechanism of the Datastore Key architecuture, leveraging it's strong consistency model when necessary:\r\n\r\n```java\r\n@Endpoint(path = \"/people\")\r\npublic class Person {\r\n\r\n    @Id\r\n    private IdRef<Person> id;\r\n\r\n    @ParentId\r\n    private IdRef<Company> companyId;\r\n\r\n    private IdRef<Address> addressId;\r\n\r\n    private String name;\r\n\r\n}\r\n```\r\nNote: All **YAWP!** POJOs must have one and only one IdRef attribute annotated with @Id\r\n\r\n### Query API\r\n\r\nFrom a HTTP call, a Java or Javascript method you can query your objects using a fluent API that nicely exposes the  Datastore Query class.\r\n\r\n**Javascript**:\r\n```javascript\r\nyawp('/people').where([ 'name', '=', 'Janes']).first( function(person) {} );\r\n\r\nyawp('/people').order([ { p: 'name', d: 'desc' } ]).list( function(people) {} );\r\n\r\nyawp('/people').from(parentId).list( function(people) {} );\r\n````\r\n\r\n**Java**:\r\n```java\r\nPerson person = yawp(Person.class).where(\"name\", \"=\", \"Janes\").first();\r\n\r\nList<Person> people = yawp(Person.class).order(\"name\", \"desc\").list();\r\n\r\nList<Person> people = yawp(Person.class).from(parentId).list();\r\n```\r\n\r\nOther Java examples, also avaibale from HTTP or Javascript:\r\n\r\n```java\r\nyawp(Person.class).where(\"name\", \"=\", \"Mark\").and(\"age\", \">=\", 21).list();\r\n\r\nyawp(Person.class).where(or(and(c(\"company\", \"=\", \"github.com\"), c(\"age\", \">=\", 21)), and(c(\"company\", \"=\", \"YAWP!\"), c(\"age\", \">=\", 18)))).ids();\r\n\r\nyawp(Person.class).where(\"name\", \"=\", \"John\").and(\"company\", \"=\", \"github.com\").only();\r\n```\r\nNote: The methods **c**, **and** and **or** must be imported static or fully qualified for this to work.\r\n\r\n\r\nYou can look at this [Java test suite](http://github.com/feroult/yawp/tree/master/src/test/java/io/yawp/repository/query/DatastoreQueryTest.java) to see examples of more complex constructions.\r\n\r\n### Endpoint Features\r\n\r\nSo far, you've seen all functionality that you get by just annotating your POJO with @Endpoint. Now it's time to see how to add custom server side business logic to your model, so you can create real world applications with specific needs.\r\n\r\nThe way **YAWP!** deal with this is by allowing you to extend the default REST schema through **Features**. You can create three kind of features for your objects: **Actions**, **Transformers** and **Hooks**.\r\n\r\n### Actions\r\n\r\nTo add custom behavior to your domain object you can use the Action API. Imagine you need to activate a given person. To do this you can create an Action class:\r\n\r\n```java\r\npublic class ActivatePersonAction extends Action<Person> {\r\n\r\n    @PUT(\"active\")\r\n    public void activate(IdRef<Person> id) {\r\n        Person person = id.fetch();\r\n        person.setActive(true);\r\n        yawp.save(person);\r\n    }\r\n\r\n}\r\n```\r\n\r\nNow, to activate a given person, let's say, with id 123, you can:\r\n\r\n<pre>\r\ncurl -X <b>PUT</b> http://localhost:8080/api<b>/people/123/active</b>\r\n</pre>\r\n\r\nThe **Javascript** equivalent would be:\r\n```javascript\r\nyawp('/people/123').put('active').done( function(status) {} );\r\n```\r\n\r\nAlso, an action be called over a single domain object or over a collection. For an action over a collection, don't specify it's IdRef or specify it's parent IdRef as the first argument:\r\n\r\n```java\r\npublic class PersonActions extends Action<Person> {\r\n    // over collection without IdRef\r\n    @GET(\"me\")\r\n    public Person me() {\r\n        return SessionManager.getLoggedPerson(yawp);\r\n    }\r\n\r\n    // over collection with parent IdRef\r\n    @GET(\"first\")\r\n    public Person first(IdRef<Company> companyId) {\r\n      return yawp(Person.class).from(companyId).first();\r\n    }\r\n}\r\n```\r\n\r\nThe following routes will be created and mapped to your methods:\r\n\r\n  * GET /users/me -> call the action me()\r\n  * GET /company/{companyId}/users/firstChild -> call the action firstUser()\r\n\r\n### Transformers\r\n\r\nThe Transformer API is used to create different views of the same domain object. If you wan't to add or hide information to be returned to the client, the way to go is to use a Transfomer. For instance:\r\n\r\n```java\r\npublic class BasicObjectTransformer extends Transformer<Person> {\r\n\r\n    public Map<String, Object> upperCase(Person person) {\r\n\r\n        Map<String, Object> map = asMap(person);\r\n        map.put(\"name\", person.getName().toUpperCase());\r\n        return map;\r\n\r\n    }\r\n\r\n}\r\n```\r\n\r\nNow, to transform a given person, let's say, with id 123, you can:\r\n\r\n<pre>\r\ncurl -X <b>GET</b> http://localhost:8080/api<b>/people/123?t=upperCase</b>\r\n</pre>\r\n\r\nThe **Javascript** equivalent would be:\r\n```javascript\r\nyawp('/people/123').transform('upperCase').first( function(person) {} );\r\n```\r\nNote: All transformers can be applied for collections queries or feching single objects.\r\n\r\nYou can also create more sofisticated transformers using the presenter pattern, like this:\r\n\r\n```java\r\npublic class UserTransformer extends Transformer<User> {\r\n\r\n   public static class UserView {\r\n        private String name;\r\n        private String company;\r\n        private int birthYear;\r\n\r\n        public UserView(User user) {\r\n            this.name = user.getName();\r\n            this.company = user.getCompany();\r\n            this.birthYear = Calendar.getInstance().get(Calendar.YEAR) - user.getAge();\r\n        }\r\n    }\r\n\r\n    public UserView withYear(User user) {\r\n        return new UserView(user);\r\n    }\r\n}\r\n```\r\n\r\n### Hooks\r\n\r\nHooks are portions of business logic that are executed before or after a particular action in the system. They can be used to set pre-calculated information on a domain object or to deny access to some users on certain actions. For example, take a look at this Hook:\r\n\r\n```java\r\npublic class UserHook extends Hook<User> {\r\n\r\n    @Override\r\n    public void beforeQuery(DatastoreQuery<User> q) {\r\n        q.where(\"company\", \"=\", Session.getLoggedUser().getCompany());\r\n    }\r\n\r\n    @Override\r\n    public void beforeSave(User user) {\r\n        if (user.getAge() < 18) {\r\n            throw new HttpException(422, \"You must be 18 or more to sign up.\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nYou can define 3 Hook types for your application:\r\n\r\n * **beforeQuery**: called before any query made via a URL. It can be used to add security or default validations;\r\n * **beforeSave**: called before an object is saved. It can be used to pre-calculate or cache some values in the entity, as well as make validations before saving;\r\n * **afterSave**: called after an object is saved. It can be used to trigger actions or log events.\r\n\r\n## Testing\r\n\r\n### Fixtures\r\n\r\n```javascript\r\n(function(fx) {\r\n\r\n    fx.person('janes', {\r\n        id : '/people/janes',\r\n        user : 'janes',\r\n        name : 'Janes Joplin',\r\n        orgId : fx.organization('dextra').id,\r\n    });\r\n\r\n})(yawp.fixtures.lazy);\r\n```\r\n\r\n### Using QUint\r\n\r\n```javascript\r\nt.asyncTest(\"transformer\", function(assert) {\r\n    expect(1);\r\n\r\n    fx.person('janes');\r\n\r\n    yawp('/people').transform('upperCase').first(function(person) {\r\n        assert.equal(person.name, 'JANES JOPLIN');\r\n        t.start();\r\n    });\r\n});\r\n```\r\n## Installation\r\n\r\n#### Maven Archetype\r\n\r\n```bash\r\nmvn archetype:generate \\\r\n  -DarchetypeGroupId=io.yawp \\\r\n  -DarchetypeArtifactId=yawp \\\r\n  -DarchetypeVersion=LATEST\r\n```\r\n\r\nFrom the generated app folder run:\r\n\r\n```\r\nmvn appengine:devserver\r\n```\r\n\r\nPoint your browser to [http://localhost:8080/test/all.html](http://localhost:8080/test/all.html) to run the default test suite.\r\n\r\n#### Maven Dependency\r\n\r\nIf you prefer to configure it manually, use this maven dependency:\r\n\r\n```xml\r\n<dependency>\r\n   <groupId>io.yawp</groupId>\r\n   <artifactId>yawp</artifactId>\r\n</dependency>\r\n```\r\nThen configure the other App Engine's stuff. You can get inspiration from this [guide](https://cloud.google.com/appengine/docs/java/gettingstarted/creating).\r\n\r\n## Credits\r\n\r\n* Fernando Ultremare - feroult@gmail.com\r\n* Guilherme Carreiro - karreiro@gmail.com\r\n* Luan Nico - luannico27@gmail.com\r\n* Paulo Victor Martins - paulovmr@gmail.com\r\n","google":"UA-54832827-1","note":"Don't delete this file! It's used internally to help with page regeneration."}